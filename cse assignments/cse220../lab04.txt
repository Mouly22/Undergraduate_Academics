class Node:
    def __init__(self, e, n, p):
        self.element = e
        self.next = n
        self.prev = p

class DoublyList:
    def __init__(self,a):
        if type(a) == list:
            self.head = Node(None, None, None)
            n = self.head
            flag = True
            for i in range(0, len(a)):
                val = Node(a[i], None, None)
                n.next = val
                val.prev = n
                n = val
            n.next = self.head
            self.head.prev = n
            
                
        else:
            self.head = a

 
    def countNode(self):
        count = 0 
        n = self.head.next
        while n.element != None:
            count += 1
            n = n.next
        return count
    
   
    def forwardprint(self):
        n = self.head.next
        while n.element != None:
            print(n.element, end =' ')
            n = n.next
            if n.element == None:
                break
        print()
        

    def backwardprint(self):
        n = self.head.prev
        while n.element != None:
            print(n.element, end = ' ')
            n = n.prev
            if n.element == None:
                break
        print()
        
                
 
    def nodeAt(self, idx):
        n = self.head.next
        count = 0
        while n.element != None:
            
            if count == idx:
                return n
            n = n.next
            count += 1
        
    


    def indexOf(self, elem):
        n = self.head.next
        count = 0
        while n.element != None:
            if n.element == elem:
                return count
            count += 1
            n = n.next
        return -1


    def insert(self, elem, idx):
        c_m = self.head.next
        m_count = 0
        while c_m.element != None:
            m_count += 1
            c_m = c_m.next
            if c_m.element == None:
                break
        store = m_count
        
        
        n = self.head.next
        node = Node(elem, None, None)
        count = 0
        if idx < 0 or idx> store:
            print('Invalid index')
            
        elif idx == 0:
            node.next = self.head.next
            self.head.next = node
            node.prev = self.head
            n.prev = node
        else:
            while n.element != None:
                temp = n.next
                if count == idx - 1:
                    node.next = temp
                    n.next = node
                    
                    node.prev = n
                    temp.prev = node
                
                n = n.next
                
                count += 1
                if n.element == None:
                    break
                    
              
    def remove(self,idx):
        c_n = self.head.next
        c_count = 0
        while c_n.element != None:
            c_count += 1
            c_n = c_n.next
            if c_n.element == None:
                break
        store = c_count
            
        n = self.head.next
        temp = n.next
        count = 1
        rtn = None
        if idx < 0 or idx > store:
            rtn = 'None'
            
        elif idx == 0:
            rtn = self.head.next.element
            self.head.next = n.next
            temp.prev = self.head
           
        else:
            ex = n
            crnt = n.next
            nxt = temp.next
            while crnt.element != None:
                rtn = crnt.element
                if count == idx:
                    ex.next = crnt.next
                    nxt.prev = ex
                    break
                
                ex = ex.next
                crnt = crnt.next
                nxt = nxt.next
                count += 1
        return str(rtn)

print("///  Test 01  ///")
a1 = [10, 20, 30, 40]
h1 = DoublyList(a1) # Creates a linked list using the values from the array

h1.forwardprint() # This should print: 10,20,30,40. 
h1.backwardprint() # This should print: 40,30,20,10. 
print(h1.countNode()) # This should print: 4

print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
myNode = h1.nodeAt(2)
print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"

print("///  Test 03  ///")
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that 
#doesn't exists in the list this will print -1.

print("///  Test 04  ///")

a2 = [10, 20, 30, 40]
h2 = DoublyList(a2) # uses the  constructor
h2.forwardprint() # This should print: 10,20,30,40.  

# inserts containing the given element at the given index. Check validity of index.
h2.insert(85,0)
h2.forwardprint() # This should print: 85,10,20,30,40. 
h2.backwardprint() # This should print: 40,30,20,10,85.

print()
h2.insert(95,3)
h2.forwardprint() # This should print: 85,10,20,95,30,40.  
h2.backwardprint() # This should print: 40,30,95,20,10,80.  

print()
h2.insert(75,6)
h2.forwardprint() # This should print: 85,10,20,95,30,40,75. 
h2.backwardprint() # This should print: 75,40,30,95,20,10,85. 


print("///  Test 05  ///")
a3 = [10, 20, 30, 40, 50, 60, 70]
h3 = DoublyList(a3) # uses the constructor
h3.forwardprint() # This should print: 10,20,30,40,50,60,70.  

# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
print("Removed element: "+ h3.remove(0)) # This should print: Removed element: 10
h3.forwardprint() # This should print: 20,30,40,50,60,70.  
h3.backwardprint() # This should print: 70,60,50,40,30,20.  
print("Removed element: "+ h3.remove(3)) # This should print: Removed element: 50
h3.forwardprint() # This should print: 20,30,40,60,70.  
h3.backwardprint() # This should print: 70,60,40,30,20.  
print("Removed element: "+ h3.remove(4)) # This should print: Removed element: 70
h3.forwardprint() # This should print: 20,30,40,60. 
h3.backwardprint() # This should print: 60,40,30,20.