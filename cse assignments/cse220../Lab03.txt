class Node:
    def __init__(self, e, n):
        self.element = e
        self.next = n

class LinkedList:
    def __init__(self, a):
        if type(a) == list:
            self.head = Node(a[0], None)
            n = self.head
            for i in range(1, len(a)):
                var = Node(a[i], None)
                n.next = var
                n = var
        else:
            self.head = a
    

    def countNode(self):
        n = self.head
        count = 0
        while n != None:
            count += 1
            n = n.next
        return count
  
  
    def printList(self):
        n = self.head
        while n != None:
            if n.next == None:
                print(n.element, end = '')
            else:
                print(n.element, end = ', ')
            n = n.next
        print()

    def nodeAt(self, idx):
        n = self.head
        count = 0
        while n != None:
            if count == idx:
                return n
            n = n.next
            count +=1
      
            

    def get(self, idx):
        n = self.head
        count = 0
        while n != None:
            if count == idx:
                return n.element
            n = n.next
            count += 1
            
  
    def set(self, idx, elem):
        n = self.head
        count = 0
        store = None
        while n != None:
            if count == idx:
                store = n.element
                n.element = elem
            n = n.next
            count += 1
        return store
            
                

    def indexOf(self, elem):
        n = self.head
        count = 0
        while n != None:
            if n.element == elem:
                return count
            n = n.next
            count += 1
        return -1
        

    def contains(self, elem):
        n = self.head
        while n != None:
            if n.element == elem:
                return True
            n = n.next
        return False

 
    def copyList(self):
        n = self.head
        node = Node(self.head.element, None)
        l_head = node
        while n.next != None:
            val = Node(n.next.element, None)
            l_head.next = val
            l_head = val
            n = n.next
        
  

    def reverseList(self):
        n = self.head
        store = 0
        count = 0
        while n != None:
            count +=1
            n= n.next
        store = count
        l_head = Node(None, None)
        v = l_head
        for i in range(store):
            var = self.head
            for j in range(count-i-1):
                var = var.next
            if v.element == None:
                l_head.element = var.element
            else:
                var = Node(var.element, None)
                v.next = var
                v = var
        return l_head
        
     

    def insert(self, elem, idx):
        n = self.head
        count = 0
        node = Node(elem, None)
        flag = True
        if idx == 0:
            node.next = self.head
            self.head = node
            flag = False
        else:
            while n != None:
                if count == idx - 1:
                    node.next = n.next
                    n.next = node
                n = n.next
                count += 1
                flag = False
        if flag:
            print('Index Error')
                
      

    def remove(self, idx):
        n = self.head
        blank = None
        flag = True
        rtn = None
        if idx == 0:
            rtn = self.head.element
            blank = self.head
            self.head = self.head.next
            flag = False
        else:
            crnt = n.next
            prev = n
            count = 1
            while crnt != None:
                if count == idx:
                    rtn = crnt.element
                    prev.next = crnt.next
                crnt = crnt.next
                prev = prev.next
                count += 1
                flag = False
        return rtn
        if flag:
            print('Index Error')
            
            
                 

    def rotateLeft(self):
        n = self.head
        store = self.head.element
        while n.next != None:
            n.element = n.next.element
            n = n.next
            if n.next == None:
                n.element = store
            

------------------------------------------------------------------------------------------------------------------------

print("////// Test 01 //////")
a1 = [10, 20, 30, 40]
h1 = LinkedList(a1) # Creates a linked list using the values from the array
# head will refer to the Node that contains the element from a[0]

h1.printList() # This should print: 10,20,30,40
print(h1.countNode()) # This should print: 4

print("////// Test 02 //////")
# returns the reference of the Node at the given index. For invalid idx return None.
myNode = h1.nodeAt(1)
print(myNode.element) # This should print: 20. In case of invalid index This will generate an Error.
    
print("////// Test 03 //////")
# returns the element of the Node at the given index. For invalid idx return None.
val = h1.get(2)
print(val) # This should print: 30. In case of invalid index This will print None.
    
    
print("////// Test 04 //////")
    
# updates the element of the Node at the given index. 
# Returns the old element that was replaced. For invalid index return None.
# parameter: index, element
         
print(h1.set(1,85)) # This should print: 20
h1.printList() # This should print: 10,85,30,40.
print(h1.set(15,85)) # This should print: None
h1.printList() # This should print: 10,85,30,40. 
    
print("////// Test 05 //////")
# returns the index of the Node containing the given element.
# if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that doesn't exists in the list this will print -1.
    
print("////// Test 06 //////")
# returns true if the element exists in the List, return false otherwise.
ask = h1.contains(40)
print(ask) # This should print: True.
    
    
print("////// Test 07 //////")
a2 = [10,20,30,40,50,60,70]
h2 = LinkedList(a2) # uses theconstructor where a is an built in list
h2.printList() # This should print: 10,20,30,40,50,60,70.  
# Makes a duplicate copy of the given List. Returns the head reference of the duplicate list.
copyH = h2.copyList() # Head node reference of the duplicate list
h3 = LinkedList(copyH) # uses the constructor where a is head of a linkedlist 
h3.printList() # This should print: 10,20,30,40,50,60,70.  
    
print("////// Test 08 //////")
a4 = [10,20,30,40,50]
h4 = LinkedList(a4) # uses theconstructor where a is an built in list
h4.printList() # This should print: 10,20,30,40,50.  
# Makes a reversed copy of the given List. Returns the head reference of the reversed list.
revH=h4.reverseList() # Head node reference of the reversed list
h5 = LinkedList(revH) # uses the constructor where a is head of a linkedlist 
h5.printList() # This should print: 50,40,30,20,10.  
    
print("////// Test 09 //////")
a6 = [10,20,30,40]
h6 = LinkedList(a6) # uses theconstructor where a is an built in list
h6.printList() # This should print: 10,20,30,40.  
    
# inserts Node containing the given element at the given index. Check validity of index.
h6.insert(85,0)
h6.printList() # This should print: 85,10,20,30,40.  
h6.insert(95,3)
h6.printList() # This should print: 85,10,20,95,30,40.  
h6.insert(75,6)
h6.printList() # This should print: 85,10,20,95,30,40,75. 
      
print("////// Test 10 //////")
a7 = [10,20,30,40,50,60,70]
h7 = LinkedList(a7) # uses theconstructor where a is an built in list
h7.printList() # This should print: 10,20,30,40,50,60,70.  
    
# removes Node at the given index. returns element of the removed node.
# Check validity of index. return None if index is invalid.
    
print("Removed element:",h7.remove(0)) # This should print: Removed element: 10
h7.printList() # This should print: 20,30,40,50,60,70.  
print("Removed element: ",h7.remove(3)) # This should print: Removed element: 50
h7.printList() # This should print: 20,30,40,60,70.  
print("Removed element: ",h7.remove(4)) # This should print: Removed element: 70
h7.printList() # This should print: 20,30,40,60. 
    
    
print("////// Test 11 //////")
a8 = [10,20,30,40]
h8 = LinkedList(a8) # uses theconstructor where a is an built in list
h8.printList() # This should print: 10,20,30,40.  
    
# Rotates the list to the left by 1 position.
h8.rotateLeft()
h8.printList() # This should print: 20,30,40,10.  
    
    
print("////// Test 12 //////")
a9 = [10,20,30,40]
h9 = LinkedList(a9) # uses theconstructor where a is an built in list
h9.printList() # This should print: 10,20,30,40.  
    
# Rotates the list to the right by 1 position.
h9.rotateRight()
h9.printList() # This should print: 40,10,20,30.
     
            
        