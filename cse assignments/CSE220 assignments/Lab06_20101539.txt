1)a)Implement a recursive algorithm to find factorial of n.

def factor(n):
    if n <= 0:
        return 1
    elif n == 1:
        return 1
    else:
        return n*factor(n-1)
    
    
print(factor(6))

————————————————————————————————————————————————

b)Implement a recursive algorithm to find the n-th Fibonacci number.

def fibN(val):
    if val <= 0:
        return 0
    if val == 1:
        return 1
    if val > 1:
        return fibN(val - 1) + fibN(val - 2)

print(fibN(7))

————————————————————————————————————————————————

c)Print all the elements of a given array recursively.

class sequence:
    def __init__(self, arry):
        self.arry = arry
        self.len = len(arry)
        self.pointer = 0
   
    def printN(self):
        if self.pointer == self.len-1:
            return self.arry[self.pointer]
        else:
            print(self.arry[self.pointer], end = ', ')
            self.pointer += 1
            return self.printN()

a1 = sequence([1000, 200, 30, 450, -600, 800])
print(a1.printN())

————————————————————————————————————————————————

d) Given base and n that are both 1 or more, compute recursively (no loops) the value of base  to the n power, so powerN(3, 2) is 9 (3 squared). 

def powerN(val, pow):
    if pow == 0:
        return 1
    elif  pow == 1:
        return  val
    else:
        return val * powerN(val, pow - 1)                                                                                                             

print(powerN(3, 5))

————————————————————————————————————————————————

2) a)Implement a recursive algorithm that takes a decimal number n and converts n to its corresponding (you may return as a string) binary number.

def binarymaker(val):
    if val == 1:
        print(f'{1}', end ='')
    elif val ==0:
        print(f'{0}', end ='')
    else:
        if val % 2 == 0:
            binarymaker(val//2)
            print(f'{0}', end = '')
        else:
            binarymaker(val//2)
            print(f'{1}', end ='')

binarymaker(100)

————————————————————————————————————————————————

b) 
class Node:
    def __init__(self, e, nxt):
        self.element = e
        self.next = nxt

class LinkedList:
    def __init__(self, a):
        self.size = len(a)
        self.count = 0
        if type(a) == list:
            self.head = Node(a[0], None)
            n = self.head
            for i in range(1, self.size):
                val = Node(a[i], None)
                n.next = val
                n = val
        else:
            self.head = a

def summ(n_head):
    if n_head == None:
        return 0
    else:
        return n_head.element + summ(n_head.next)

array = [10, 20, 40, 90, 50]
a1 = LinkedList(array)
print(summ(a1.head))

————————————————————————————————————————————————

c)
class Node:
    def __init__(self, e, nxt):
        self.element = e
        self.next = nxt

class LinkedList:
    def __init__(self, a):
        self.size = len(a)
        self.count = 0
        if type(a) == list:
            self.head = Node(a[0], None)
            n = self.head
            for i in range(1, self.size):
                val = Node(a[i], None)
                n.next = val
                n = val
        else:
            self.head = a
            
def reverse(val):
    if val.next == None:
        print(val.element)
    else:
        reverse(val.next)
        print(val.element)
        
        
        
lst = [50, 40, 30, 90, 0]            
a1 = LinkedList(lst)
reverse(a1.head)

————————————————————————————————————————————————

3)
def hocBuilder(height):
    if height == 0:
        return 0
    elif height == 1:
        return 8 
    elif height >= 1:
        return (5+hocBuilder(height - 1))
    
print(hocBuilder(4)) 

————————————————————————————————————————————————

4)a) 
def lefttriangle(number, inc):
    sum = number+ inc
    if number <= 0:
        return 1
    else:
        increment(inc, number, sum)
        lefttriangle(number - 1, inc +1)

def increment(count,number,sum):
    if count <= 0:
        return 1
    else:
        increment(count - 1,number, sum)
        if count+number == sum:
            print(count)
        else:
            print(count, end = ' ')


lefttriangle(5, 1)

————————————————————————————————————————————————

4)b) 
def righttriangle(number, inc):
    suum = number+ inc
    if number <= 0:
        return 1
    else:
        blankspace(number - 1)
        increment(inc,number,suum)
        righttriangle(number - 1, inc+1)
        
def blankspace(s_count):
    if s_count == 0:
        return
    else:
        print(" ", end = ' ')
        blankspace(s_count - 1)

    
def increment(count,number,suum):
    if count <= 0:
        return 
    else:
        increment(count - 1, number,suum)
        if count+number == suum:
            print(count)
        else:
            print(count, end = ' ')
righttriangle(5, 1)

————————————————————————————————————————————————

5)
class FinalQ: 
    def print(self,array,idx):
        
        if(idx<len(array)): 

            profit = self.calcProfit(array[idx])
            #self.print(array, idx +1)

            print(f'Investment: {array[idx]}; Profit: {profit}')
            self.print(array, idx +1)
            
                  
  
    def calcProfit(self,investment):

        if investment <= 25000:
            return 0.0
        elif investment <= 100000:
            return 45 + self.calcProfit(investment - 1000)
        else:
            return 80 + self.calcProfit(investment - 1000)

array=[25000,100000,250000,350000] 
f = FinalQ() 
f.print(array,0)


————————————————————————————————————————————————

